---
iname: Dive CI Analysis
description: Analyzes Docker images using Dive with CI
inputs:
  image_name:
    description: Docker image name
    required: true
  use_config:
    description: Using CI config file or generate config from variables
    required: false
    default: "false"
  ci_config:
    description: Path to Dive CI configuration file (.dive-ci.yml)
    required: false
  lowestEfficiency:
    description: If the efficiency is measured below X%, mark as failed.Expressed as a ratio between 0-1.
    required: false
  highestWastedBytes:
    description: If the amount of wasted space is at least X or larger than X, mark as failed.Expressed in B, KB, MB, and GB.
    required: false
  highestUserWastedPercent:
    description: If the amount of wasted space makes up for X% or more of the image, mark as failed.Expressed as a ratio between 0-1; fails if the threshold is met or crossed.
    required: false
  allow_large_image:
    description: Set to true if the image size exceeds 1 GB
    required: false
    default: "false"
  continue_on_fail:
    description: Set false to fail launches that don't pass the test.
    required: false
    default: "true"
  report:
    description: Enable report generation to /tmp/DIVE_REPORT.md
    required: false
    default: "true"
  summary:
    description: Enable summary generation from /tmp/DIVE_REPORT.md
    required: false
    default: "false"
runs:
  using: composite
  steps:
    - name: Checkout action repository
      uses: actions/checkout@v4
      with:
        repository: dzhunli/godive-action
    - run: |
        echo "::group::Fetching the latest Dive version..."
        DIVE_VERSION=$(curl -sL "https://api.github.com/repos/wagoodman/dive/releases/latest" | grep '"tag_name":'| sed -E 's/.*"v([^"]+)".*/\1/')
        echo "::endgroup::"
        echo "::group::Downloading and installing Dive..."
        curl -OL https://github.com/wagoodman/dive/releases/download/v${DIVE_VERSION}/dive_${DIVE_VERSION}_linux_amd64.deb
        sudo apt install -qqq ./dive_${DIVE_VERSION}_linux_amd64.deb
        echo "::endgroup::"
        echo "::group::Configure ci..."
        if [[ "${{ inputs.use_config }}" == "true" ]]; then
          dive_ci_conf="${{ inputs.ci_config }}"
        elif [[ "${{ inputs.use_config }}" == "false" ]]; then
          if [[ -n "${{ inputs.lowestEfficiency }}" && -n "${{ inputs.highestUserWastedPercent }}" && -n "${{ inputs.highestWastedBytes }}" ]]; then
            sed -i "s|<efficiency_percent>|${{ inputs.lowestEfficiency }}|g" blueprint.yaml
            sed -i "s|<wasted_bytes>|${{ inputs.highestWastedBytes }}|g" blueprint.yaml
            sed -i "s|<wasted_percent>|${{ inputs.highestUserWastedPercent }}|g" blueprint.yaml
            cp blueprint.yaml /tmp/ci-config.yaml
            dive_ci_conf="/tmp/ci-config.yaml"
          else
            echo "❌ 'use_config' is false, but one or more required inputs are missing:"
            echo "   - lowestEfficiency: '${{ inputs.lowestEfficiency }}'"
            echo "   - highestUserWastedPercent: '${{ inputs.highestUserWastedPercent }}'"
            echo "   - allow_large_image: '${{ inputs.allow_large_image }}'"
            exit 1
          fi
        else
          echo "❌ Invalid value for 'use_config': '${{ inputs.use_config }}'. Expected 'true' or 'false'."
          exit 1
        fi
        echo "::endgroup::"
        compiled/godive-action "${{ inputs.image_name }}" \
         "$dive_ci_conf" \
         "${{ inputs.allow_large_image }}" \
         "${{ inputs.continue_on_fail }}" \
         "${{ inputs.report }}"
      shell: bash
    - name: Generate Summary
      if: inputs.summary == 'true'
      run: |
        if [[ ! -f /tmp/DIVE_REPORT.md ]]; then
          echo "❌ DIVE_REPORT.md not found(you may need set report=true).Skipping summary generation." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        {
          echo ""
          echo "---"
          echo "## 🧪 Dive analysis result for \`${{ inputs.image_name }}\`"
          echo ""
          echo '```markdown'
          echo "###  🐳  Image Info"
          grep -E '^Analyzing image' DIVE_REPORT.md | head -n 1 || echo "No image info found."
          echo ""
          echo "### 📊 Analysis Summary"
          grep -A 10 '^Results:' DIVE_REPORT.md || echo "No results section found."
          echo ""
          echo '```'
        } >> $GITHUB_STEP_SUMMARY
      shell: bash